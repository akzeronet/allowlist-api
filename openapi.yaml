openapi: 3.0.3
info:
  title: Allowlist API
  version: "1.2.2"

servers:
  - url: /
    description: Relative (same host)
  - url: "http://localhost:8080"
    description: Local
  - url: "https://api.mi-dominio.com"
    description: Prod

tags:
  - name: system
  - name: entries
  - name: validate
  - name: keys

security:
  - ApiKeyAuth: []
  - HmacAuth: []

paths:
  /health:
    get:
      summary: Health check
      tags: [system]
      responses:
        "200": { description: OK }

  /entries:
    get:
      summary: List entries
      tags: [entries]
      parameters:
        - in: query
          name: email
          schema: { type: string, format: email }
        - in: query
          name: username
          schema: { type: string }
        - in: query
          name: domain
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, maximum: 200, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "200": { description: OK }

    post:
      summary: Create entry
      tags: [entries]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateEntry' }
      parameters:
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "201": { description: Created }
        "400": { description: Missing fields }
        "409": { description: Conflict }

  /entries/{id}:
    get:
      summary: Get entry by id
      tags: [entries]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "200": { description: OK }
        "404": { description: Not found }

    put:
      summary: Update entry by id
      tags: [entries]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateEntry' }
      responses:
        "200": { description: Updated }
        "404": { description: Not found }
        "409": { description: Conflict }

    delete:
      summary: Delete entry by id
      tags: [entries]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "200": { description: Deleted }

  /entries/lookup:
    get:
      summary: Lookup one by id | email | username | mm_uid
      tags: [entries]
      parameters:
        - in: query
          name: id
          schema: { type: integer }
        - in: query
          name: email
          schema: { type: string, format: email }
        - in: query
          name: username
          schema: { type: string }
        - in: query
          name: mm_uid
          schema: { type: string }
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "200": { description: OK }
        "404": { description: Not found }

  /entries/bulk:
    post:
      summary: Bulk create (create-only per item)
      tags: [entries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/CreateEntry' }
      parameters:
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "207": { description: Multi-status summary }

  /validate:
    get:
      summary: Validate entry
      tags: [validate]
      parameters:
        - in: query
          name: email
          schema: { type: string, format: email }
        - in: query
          name: username
          schema: { type: string }
        - in: query
          name: mm_uid
          schema: { type: string }
        - $ref: '#/components/parameters/XTimestamp'
        - $ref: '#/components/parameters/XContentHash'
      responses:
        "200": { description: OK }

  /keys:
    post:
      summary: Create API key (admin)
      description: Crea una clave con *scopes* y devuelve el **token** `kid.secret` (solo se muestra una vez).
      tags: [keys]
      security:
        - ApiKeyAuth: []   # API_KEY global o multi-key con scope admin, o HMAC
        - HmacAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:   { type: string, example: "n8n-writer" }
                scopes:
                  type: array
                  items: { type: string, enum: [read, write, delete, admin] }
                  example: [read, write]
                active: { type: boolean, default: true }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created: { type: boolean }
                  key:
                    type: object
                    properties:
                      id:     { type: integer }
                      name:   { type: string }
                      kid:    { type: string }
                      scopes:
                        type: array
                        items: { type: string }
                      active: { type: boolean }
                  token:
                    type: string
                    description: "Formato: kid.secret (guárdalo ahora; no se vuelve a mostrar)."

    get:
      summary: List API keys (admin)
      tags: [keys]
      security:
        - ApiKeyAuth: []
        - HmacAuth: []
      responses:
        "200":
          description: OK

  /keys/{id}:
    put:
      summary: Update API key (admin)
      tags: [keys]
      security:
        - ApiKeyAuth: []
        - HmacAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:   { type: string }
                scopes:
                  type: array
                  items: { type: string, enum: [read, write, delete, admin] }
                active: { type: boolean }
      responses:
        "200": { description: Updated }

    delete:
      summary: Delete API key (admin)
      tags: [keys]
      security:
        - ApiKeyAuth: []
        - HmacAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Deleted }

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        - **Global:** `X-API-Key: <API_KEY>`
        - **Multi-key (scopes):** `X-API-Key: <kid>.<secret>`
        - **Old:** `X-API-Key: <API_KEY_OLD>` (rotación)
        Scopes: `read`, `write`, `delete`, `admin`.

    HmacAuth:
      type: apiKey
      in: header
      name: X-Signature
      description: |
        Firma HMAC opcional (si `HMAC_SECRET` está definido).
        Requiere también `X-Timestamp` (epoch s/ms) y `X-Content-Hash` (sha256 del body en hex).
        Base: `${method}\n${path}\n${timestamp}\n${bodyHash}`

  parameters:
    XTimestamp:
      name: X-Timestamp
      in: header
      required: false
      schema: { type: string }
    XContentHash:
      name: X-Content-Hash
      in: header
      required: false
      schema: { type: string }

  schemas:
    Entry:
      type: object
      properties:
        id:        { type: integer }
        username:  { type: string }
        email:     { type: string, format: email }
        panelUrl:  { type: string, format: uri }
        token:     { type: string, description: "Devuelto en claro; en BD cifrado si ENC_KEY está definida" }
        active:    { type: boolean }
        mm_uid:    { type: string, nullable: true }
        createdAt: { type: string }
        updatedAt: { type: string }

    CreateEntry:
      type: object
      required: [username, email, panelUrl, token]
      properties:
        username: { type: string }
        email:    { type: string, format: email }
        panelUrl: { type: string, format: uri }
        token:    { type: string }
        active:   { type: boolean, default: true }
        mm_uid:   { type: string, nullable: true }

    UpdateEntry:
      type: object
      properties:
        username: { type: string }
        email:    { type: string, format: email }
        panelUrl: { type: string, format: uri }
        token:    { type: string }
        active:   { type: boolean }
        mm_uid:   { type: string, nullable: true }
